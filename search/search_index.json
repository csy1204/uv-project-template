{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#installing-uv","title":"Installing uv","text":"<ul> <li>\uc0ac\uc6a9\uc790 \ud658\uacbd\uc5d0 \ub9de\uac8c \uacf5\uc2dd \ubb38\uc11c\uc5d0 \ub530\ub77c \uc124\uce58\ud574\uc8fc\uc138\uc694</li> <li>Mac\uc758 \uacbd\uc6b0 \uc544\ub798\ucc98\ub7fc \ud55c \ud6c4 shell\uc744 \uc7ac\uc2dc\uc791\ud558\uba74 \ub410\uc2b5\ub2c8\ub2e4.</li> </ul> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\necho 'eval \"$(uv generate-shell-completion zsh)\"' &gt;&gt; ~/.zshrc\necho 'eval \"$(uvx --generate-shell-completion zsh)\"' &gt;&gt; ~/.zshrc\n</code></pre>"},{"location":"#installing-python","title":"Installing Python","text":"<ul> <li><code>uv python install 3.11</code></li> <li><code>uv python pin 3.11</code></li> </ul>"},{"location":"#creating-projects","title":"Creating Projects Application (\uae30\ubcf8\uac12)","text":"<ul> <li><code>uv init</code>\uc73c\ub85c \ud558\ub294\ub370 app, package, lib 3\uac00\uc9c0 \ud615\ud0dc\uac00 \uc788\uc5b4 \uc544\ub798 \uc124\uba85\uc744 \ucc38\uace0\ud558\uc5ec \uc124\uc815\ud558\uba74 \uc88b\uc74c</li> <li>\uac04\ub2e8\ud55c\uac74 app, \uc5d4\ud130\ud504\ub77c\uc774\uc988\uae09\uc758 \ud070 \uaddc\ubaa8\ub294 pacakges\ub85c \uac00\ub294\uac8c \uc88b\uc544\ubcf4\uc784</li> </ul> uv\uc758 3\uac00\uc9c0 init \ud615\uc2dd\uc5d0 \ub300\ud55c \uc124\uba85 <ul> <li><code>uv init</code> \ub610\ub294 <code>uv init --app</code>\uc73c\ub85c \uc0dd\uc131</li> <li>\uc6f9 \uc11c\ubc84, \uc2a4\ud06c\ub9bd\ud2b8, CLI \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \uc801\ud569\ud55c \uae30\ubcf8 \uad6c\uc870</li> <li>\uc0dd\uc131\ub418\ub294 \ud30c\uc77c:<ul> <li>pyproject.toml</li> <li>hello.py</li> <li>README.md</li> <li>.python-version</li> </ul> </li> </ul>"},{"location":"#library","title":"Library","text":"<ul> <li><code>uv init --lib</code>\uc73c\ub85c \uc0dd\uc131</li> <li>\ub2e4\ub978 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc784\ud3ec\ud2b8\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \uac1c\ubc1c\uc6a9</li> <li>src \ub514\ub809\ud1a0\ub9ac \uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uba70 init.py \ud30c\uc77c \ud3ec\ud568</li> </ul>"},{"location":"#package-application","title":"Package Application","text":"<ul> <li><code>uv init --package</code>\ub85c \uc0dd\uc131</li> <li>PyPI\uc5d0 \ubc30\ud3ec\ud558\uac70\ub098 \ud14c\uc2a4\ud2b8 \ub514\ub809\ud1a0\ub9ac\uac00 \ud544\uc694\ud55c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \uc801\ud569</li> <li>src \ub514\ub809\ud1a0\ub9ac \uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uba70 \ubaa8\ub4c8 \ub514\ub809\ud1a0\ub9ac\uc640 init.py \ud3ec\ud568</li> </ul>"},{"location":"#-","title":"\ube44\uad50\ud45c","text":"\uad6c\ubd84 Application Library Package Application \uc6a9\ub3c4 \uc6f9\uc11c\ubc84, \uc2a4\ud06c\ub9bd\ud2b8, CLI \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac PyPI \ubc30\ud3ec\uc6a9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uad6c\uc870 \ud50c\ub7ab \uad6c\uc870 src/ \uad6c\uc870 src/ \uad6c\uc870 \ube4c\ub4dc\uc2dc\uc2a4\ud15c \uc5c6\uc74c \uc788\uc74c \uc788\uc74c \uc124\uce58 \ud544\uc694\uc131 \ud658\uacbd\uc5d0 \uc124\uce58 \uc548\ub428 \ud658\uacbd\uc5d0 \uc124\uce58\ub428 \ud658\uacbd\uc5d0 \uc124\uce58\ub428 \uc8fc\uc694 \ud2b9\uc9d5 \uac04\ub2e8\ud55c \uad6c\uc870 \ud0c0\uc785 \ud78c\ud305 \uc9c0\uc6d0 \ud328\ud0a4\uc9d5\uacfc \ubc30\ud3ec \uc6a9\uc774"},{"location":"#set-venv-and-installing-dev-dependency","title":"Set venv and Installing dev dependency","text":"<pre><code>uv venv\nuv add --dev mkdocs-material pytest pre-commit ruff pytest-cov \"mkdocstrings[python]\"\n</code></pre>"},{"location":"io/","title":"IO","text":""},{"location":"io/#common_example.services.io","title":"<code>common_example.services.io</code>","text":""},{"location":"io/#common_example.services.io.__all__","title":"<code>__all__ = ['DeltaLakeManager', 'S3Manager', 'HDFSManager', 'ParquetManager']</code>  <code>module-attribute</code>","text":""},{"location":"io/#common_example.services.io.DeltaLakeManager","title":"<code>DeltaLakeManager</code>","text":"Source code in <code>src/common_example/services/io/deltalake_manager.py</code> <pre><code>class DeltaLakeManager:\n    def __init__(self, spark, delta_table_path: str):\n        self.spark = spark\n        self.delta_table_path = delta_table_path\n\n    def read_table(self):\n        return self.spark.read.format(\"delta\").load(self.delta_table_path)\n\n    def write_table(self, df):\n        df.write.format(\"delta\").mode(\"overwrite\").save(self.delta_table_path)\n\n    def append_table(self, df):\n        df.write.format(\"delta\").mode(\"append\").save(self.delta_table_path)\n\n    def update_table(self, df, condition: str):\n        df.createOrReplaceTempView(\"updates\")\n        self.spark.sql(f\"MERGE INTO delta.`{self.delta_table_path}` AS target USING updates AS source ON {condition} WHEN MATCHED THEN UPDATE SET * WHEN NOT MATCHED THEN INSERT *\")\n\n    def delete_table(self, condition: str):\n        self.spark.sql(f\"DELETE FROM delta.`{self.delta_table_path}` WHERE {condition}\")\n</code></pre>"},{"location":"io/#common_example.services.io.HDFSManager","title":"<code>HDFSManager</code>","text":"Source code in <code>src/common_example/services/io/hdfs_manager.py</code> <pre><code>class HDFSManager:\n    def __init__(self, hdfs_host, hdfs_port, hdfs_user):\n        \"\"\"_summary_\n\n        Args:\n            hdfs_host (_type_): _description_\n            hdfs_port (_type_): _description_\n            hdfs_user (_type_): _description_\n        \"\"\"\n        self.hdfs_host = hdfs_host\n        self.hdfs_port = hdfs_port\n        self.hdfs_user = hdfs_user\n        # self.client = Client(f\"http://{self.hdfs_host}:{self.hdfs_port}\", user=self.hdfs_user)\n\n    def list_files(self, path):\n        return self.client.list(path)\n\n    def read_file(self, path):\n        with self.client.read(path) as reader:\n            return reader.read()\n\n    def write_file(self, path, content):\n        with self.client.write(path, overwrite=True) as writer:\n            writer.write(content)\n\n    def delete_file(self, path):\n        self.client.delete(path)\n\n    def delete_dir(self, path):\n        self.client.delete(path, recursive=True)\n\n    def create_dir(self, path):\n        self.client.makedirs(path)\n</code></pre>"},{"location":"io/#common_example.services.io.HDFSManager.__init__","title":"<code>__init__(hdfs_host, hdfs_port, hdfs_user)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>hdfs_host</code> <code>_type_</code> <p>description</p> required <code>hdfs_port</code> <code>_type_</code> <p>description</p> required <code>hdfs_user</code> <code>_type_</code> <p>description</p> required Source code in <code>src/common_example/services/io/hdfs_manager.py</code> <pre><code>def __init__(self, hdfs_host, hdfs_port, hdfs_user):\n    \"\"\"_summary_\n\n    Args:\n        hdfs_host (_type_): _description_\n        hdfs_port (_type_): _description_\n        hdfs_user (_type_): _description_\n    \"\"\"\n    self.hdfs_host = hdfs_host\n    self.hdfs_port = hdfs_port\n    self.hdfs_user = hdfs_user\n</code></pre>"},{"location":"io/#common_example.services.io.ParquetManager","title":"<code>ParquetManager</code>","text":"Source code in <code>src/common_example/services/io/parquet_manager.py</code> <pre><code>class ParquetManager:\n    def __init__(self, file_path: str):\n        self.file_path = file_path\n\n    def read(self):\n        import pandas as pd\n        return pd.read_parquet(self.file_path)\n\n    def write(self, df):\n        df.to_parquet(self.file_path, index=False)\n</code></pre>"},{"location":"io/#common_example.services.io.S3Manager","title":"<code>S3Manager</code>","text":"<p>S3Manager class to upload and download files from S3 bucket</p> Source code in <code>src/common_example/services/io/s3_manager.py</code> <pre><code>class S3Manager:\n    \"\"\"\n    S3Manager class to upload and download files from S3 bucket\n    \"\"\"\n    def __init__(self):\n        pass\n\n    def upload_file(self, bucket_name: str, file_path: str, key: str):\n        \"\"\"_summary_\n\n        Args:\n            bucket_name (str): _description_\n            file_path (str): _description_\n            key (str): _description_\n        \"\"\"\n        s3 = boto3.client(\"s3\")\n        try:\n            s3.upload_file(file_path, bucket_name, key)\n            print(f\"File uploaded successfully to S3 bucket: {bucket_name}\")\n        except Exception as e:\n            print(f\"Error uploading file to S3 bucket: {e}\")\n\n    def download_file(self, bucket_name, key, file_path):\n        \"\"\"_summary_\n\n        Args:\n            bucket_name (_type_): _description_\n            key (_type_): _description_\n            file_path (_type_): _description_\n        \"\"\"\n        s3 = boto3.client(\"s3\")\n        try:\n            s3.download_file(bucket_name, key, file_path)\n            print(f\"File downloaded successfully from S3 bucket: {bucket_name}\")\n        except Exception as e:\n            print(f\"Error downloading file from S3 bucket: {e}\")\n</code></pre>"},{"location":"io/#common_example.services.io.S3Manager.download_file","title":"<code>download_file(bucket_name, key, file_path)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>_type_</code> <p>description</p> required <code>key</code> <code>_type_</code> <p>description</p> required <code>file_path</code> <code>_type_</code> <p>description</p> required Source code in <code>src/common_example/services/io/s3_manager.py</code> <pre><code>def download_file(self, bucket_name, key, file_path):\n    \"\"\"_summary_\n\n    Args:\n        bucket_name (_type_): _description_\n        key (_type_): _description_\n        file_path (_type_): _description_\n    \"\"\"\n    s3 = boto3.client(\"s3\")\n    try:\n        s3.download_file(bucket_name, key, file_path)\n        print(f\"File downloaded successfully from S3 bucket: {bucket_name}\")\n    except Exception as e:\n        print(f\"Error downloading file from S3 bucket: {e}\")\n</code></pre>"},{"location":"io/#common_example.services.io.S3Manager.upload_file","title":"<code>upload_file(bucket_name, file_path, key)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>description</p> required <code>file_path</code> <code>str</code> <p>description</p> required <code>key</code> <code>str</code> <p>description</p> required Source code in <code>src/common_example/services/io/s3_manager.py</code> <pre><code>def upload_file(self, bucket_name: str, file_path: str, key: str):\n    \"\"\"_summary_\n\n    Args:\n        bucket_name (str): _description_\n        file_path (str): _description_\n        key (str): _description_\n    \"\"\"\n    s3 = boto3.client(\"s3\")\n    try:\n        s3.upload_file(file_path, bucket_name, key)\n        print(f\"File uploaded successfully to S3 bucket: {bucket_name}\")\n    except Exception as e:\n        print(f\"Error uploading file to S3 bucket: {e}\")\n</code></pre>"},{"location":"reference/hdfs/","title":"HDFSManager","text":""},{"location":"reference/hdfs/#common_example.services.io.hdfs_manager.HDFSManager","title":"<code>common_example.services.io.hdfs_manager.HDFSManager</code>","text":"Source code in <code>src/common_example/services/io/hdfs_manager.py</code> <pre><code>class HDFSManager:\n    def __init__(self, hdfs_host, hdfs_port, hdfs_user):\n        \"\"\"_summary_\n\n        Args:\n            hdfs_host (_type_): _description_\n            hdfs_port (_type_): _description_\n            hdfs_user (_type_): _description_\n        \"\"\"\n        self.hdfs_host = hdfs_host\n        self.hdfs_port = hdfs_port\n        self.hdfs_user = hdfs_user\n        # self.client = Client(f\"http://{self.hdfs_host}:{self.hdfs_port}\", user=self.hdfs_user)\n\n    def list_files(self, path):\n        return self.client.list(path)\n\n    def read_file(self, path):\n        with self.client.read(path) as reader:\n            return reader.read()\n\n    def write_file(self, path, content):\n        with self.client.write(path, overwrite=True) as writer:\n            writer.write(content)\n\n    def delete_file(self, path):\n        self.client.delete(path)\n\n    def delete_dir(self, path):\n        self.client.delete(path, recursive=True)\n\n    def create_dir(self, path):\n        self.client.makedirs(path)\n</code></pre>"},{"location":"reference/hdfs/#common_example.services.io.hdfs_manager.HDFSManager.__init__","title":"<code>__init__(hdfs_host, hdfs_port, hdfs_user)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>hdfs_host</code> <code>_type_</code> <p>description</p> required <code>hdfs_port</code> <code>_type_</code> <p>description</p> required <code>hdfs_user</code> <code>_type_</code> <p>description</p> required Source code in <code>src/common_example/services/io/hdfs_manager.py</code> <pre><code>def __init__(self, hdfs_host, hdfs_port, hdfs_user):\n    \"\"\"_summary_\n\n    Args:\n        hdfs_host (_type_): _description_\n        hdfs_port (_type_): _description_\n        hdfs_user (_type_): _description_\n    \"\"\"\n    self.hdfs_host = hdfs_host\n    self.hdfs_port = hdfs_port\n    self.hdfs_user = hdfs_user\n</code></pre>"},{"location":"reference/parquet/","title":"Parquet Manager","text":""},{"location":"reference/parquet/#common_example.services.io.parquet_manager.ParquetManager","title":"<code>common_example.services.io.parquet_manager.ParquetManager</code>","text":"Source code in <code>src/common_example/services/io/parquet_manager.py</code> <pre><code>class ParquetManager:\n    def __init__(self, file_path: str):\n        self.file_path = file_path\n\n    def read(self):\n        import pandas as pd\n        return pd.read_parquet(self.file_path)\n\n    def write(self, df):\n        df.to_parquet(self.file_path, index=False)\n</code></pre>"},{"location":"reference/s3/","title":"s3","text":""},{"location":"reference/s3/#common_example.services.io.s3_manager.S3Manager","title":"<code>common_example.services.io.s3_manager.S3Manager</code>","text":"<p>S3Manager class to upload and download files from S3 bucket</p> Source code in <code>src/common_example/services/io/s3_manager.py</code> <pre><code>class S3Manager:\n    \"\"\"\n    S3Manager class to upload and download files from S3 bucket\n    \"\"\"\n    def __init__(self):\n        pass\n\n    def upload_file(self, bucket_name: str, file_path: str, key: str):\n        \"\"\"_summary_\n\n        Args:\n            bucket_name (str): _description_\n            file_path (str): _description_\n            key (str): _description_\n        \"\"\"\n        s3 = boto3.client(\"s3\")\n        try:\n            s3.upload_file(file_path, bucket_name, key)\n            print(f\"File uploaded successfully to S3 bucket: {bucket_name}\")\n        except Exception as e:\n            print(f\"Error uploading file to S3 bucket: {e}\")\n\n    def download_file(self, bucket_name, key, file_path):\n        \"\"\"_summary_\n\n        Args:\n            bucket_name (_type_): _description_\n            key (_type_): _description_\n            file_path (_type_): _description_\n        \"\"\"\n        s3 = boto3.client(\"s3\")\n        try:\n            s3.download_file(bucket_name, key, file_path)\n            print(f\"File downloaded successfully from S3 bucket: {bucket_name}\")\n        except Exception as e:\n            print(f\"Error downloading file from S3 bucket: {e}\")\n</code></pre>"},{"location":"reference/s3/#common_example.services.io.s3_manager.S3Manager.download_file","title":"<code>download_file(bucket_name, key, file_path)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>_type_</code> <p>description</p> required <code>key</code> <code>_type_</code> <p>description</p> required <code>file_path</code> <code>_type_</code> <p>description</p> required Source code in <code>src/common_example/services/io/s3_manager.py</code> <pre><code>def download_file(self, bucket_name, key, file_path):\n    \"\"\"_summary_\n\n    Args:\n        bucket_name (_type_): _description_\n        key (_type_): _description_\n        file_path (_type_): _description_\n    \"\"\"\n    s3 = boto3.client(\"s3\")\n    try:\n        s3.download_file(bucket_name, key, file_path)\n        print(f\"File downloaded successfully from S3 bucket: {bucket_name}\")\n    except Exception as e:\n        print(f\"Error downloading file from S3 bucket: {e}\")\n</code></pre>"},{"location":"reference/s3/#common_example.services.io.s3_manager.S3Manager.upload_file","title":"<code>upload_file(bucket_name, file_path, key)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>description</p> required <code>file_path</code> <code>str</code> <p>description</p> required <code>key</code> <code>str</code> <p>description</p> required Source code in <code>src/common_example/services/io/s3_manager.py</code> <pre><code>def upload_file(self, bucket_name: str, file_path: str, key: str):\n    \"\"\"_summary_\n\n    Args:\n        bucket_name (str): _description_\n        file_path (str): _description_\n        key (str): _description_\n    \"\"\"\n    s3 = boto3.client(\"s3\")\n    try:\n        s3.upload_file(file_path, bucket_name, key)\n        print(f\"File uploaded successfully to S3 bucket: {bucket_name}\")\n    except Exception as e:\n        print(f\"Error uploading file to S3 bucket: {e}\")\n</code></pre>"}]}